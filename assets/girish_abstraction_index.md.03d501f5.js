import{_ as a,o as t,c as i,Q as n}from"./chunks/framework.5a42e701.js";const e="/assets/abstraction.9512db74.png",s="/assets/abstraction-principles.e7361c54.png",k=JSON.parse('{"title":"Abstraction","description":"","frontmatter":{},"headers":[],"relativePath":"girish/abstraction/index.md","filePath":"girish/abstraction/index.md"}'),r={name:"girish/abstraction/index.md"},d=n('<h1 id="abstraction" tabindex="-1">Abstraction <a class="header-anchor" href="#abstraction" aria-label="Permalink to &quot;Abstraction&quot;">​</a></h1><p><img src="'+e+'" alt="Girish abstraction smell"></p><p>Semua smell di dalam grup ini berkaitan dengan kesalahan dalam mendesain abstraksi.</p><ul><li><a href="./missing/">Missing Abstraction</a></li><li><a href="./imperative/">Imperative Abstraction</a></li><li><a href="./incomplete/">Incomplete Abstraction</a></li><li><a href="./multifaceted/">Multifaceted Abstraction</a></li><li><a href="./unnecessary/">Unnecessary Abstraction</a></li><li><a href="./unutilized/">Unutilized Abstraction</a></li><li><a href="./duplicate/">Duplicate Abstraction</a></li></ul><h2 id="prinsip-abstraction" tabindex="-1">Prinsip abstraction <a class="header-anchor" href="#prinsip-abstraction" aria-label="Permalink to &quot;Prinsip abstraction&quot;">​</a></h2><p><img src="'+s+'" alt="Girish abstraction principles"></p><p>Menurut Girish Suryanarayana dkk, terdapat 5 prinsip abstraction yaitu:</p><ul><li><strong>Provide a crisp conceptual boundary and an identity</strong> - Adanya boundary yang jelas.</li><li><strong>Map domain entities</strong> - Pemilihan kata yang tepat terhadap domain.</li><li><strong>Ensure coherence and completeness</strong> - Berikan detail kelas yang selengkap-lengkapnya dan koheren (termasuk pasangan/lawan kata).</li><li><strong>Assign single and meaningful responsibility</strong> - Hanya memegang 1 tanggungjawab penting dalam 1 class.</li><li><strong>Avoid duplication</strong> - Hindari duplikat nama atau implementasi dalam abstraksi.</li></ul><p>Berdasarkan pada pengamatan abstraction smell, terdapat pelanggaran prinsip abstraction antara lain:</p><table><thead><tr><th>Abstraction smell</th><th>Pelanggaran prinsip abstraction</th><th>Penyebab</th><th>Martin Fowler smells</th></tr></thead><tbody><tr><td>Missing Abstraction</td><td>Provide a crisp conceptual boundary and a unique identity</td><td>Pemakaian komponen-komponen data/string tanpa membuatkan object class</td><td>Primitive Obsession, Data Clumps</td></tr><tr><td>Imperative Abstraction</td><td>Map domain entities</td><td>Proses dijadikan class, pemikiran Procedural dalam Object-oriented programming</td><td>Lazy Class <em>(Potentially)</em></td></tr><tr><td>Incomplete Abstraction</td><td>Ensure coherence and completeness</td><td>Tidak ada pasang/lawan kata domain</td><td>-</td></tr><tr><td>Multifaceted Abstraction</td><td>Assign single and meaningful responsibility</td><td>Satu class memegang &gt; 1 tanggungjawab</td><td>Divergent Changes + Large Class</td></tr><tr><td>Unnecessary Abstraction</td><td>Assign single and meaningful responsibility</td><td>Pembuatan class yang seharusnya tidak diperlukan (alias overengineering)</td><td>Speculative Generalities</td></tr><tr><td>Unutilized Abstraction</td><td>Assign single and meaningful responsibility</td><td>Ada class yang tidak terpakai sama sekali</td><td>Dead Code</td></tr><tr><td>Duplicate Abstraction</td><td>Avoid duplication</td><td>Ada method/implementasi yang sama antar class</td><td>Alternative Classes with Different Interfaces</td></tr></tbody></table><hr><p>Repository ini hanyalah rangkuman dari buku Suryanarayana et al. dengan sedikit tambahan informasi lain. Diharapkan mahasiswa juga membaca sumber aslinya pada bab 3 halaman 21 - 60.</p>',12),l=[d];function o(c,p,m,g,b,u){return t(),i("div",null,l)}const y=a(r,[["render",o]]);export{k as __pageData,y as default};
