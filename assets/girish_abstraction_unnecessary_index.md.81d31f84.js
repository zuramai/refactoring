import{_ as s,C as r,o,c as l,k as e,a,H as t,w as i,Q as d}from"./chunks/framework.1ff90abd.js";const P=JSON.parse('{"title":"Unnecessary Abstraction","description":"","frontmatter":{},"headers":[],"relativePath":"girish/abstraction/unnecessary/index.md","filePath":"girish/abstraction/unnecessary/index.md"}'),u={name:"girish/abstraction/unnecessary/index.md"},c=d('<h1 id="unnecessary-abstraction" tabindex="-1">Unnecessary Abstraction <a class="header-anchor" href="#unnecessary-abstraction" aria-label="Permalink to &quot;Unnecessary Abstraction&quot;">​</a></h1><p>Smell ini terjadi ketika ada class yang dibuat padahal tidak dibutuhkan.</p><p>Smell ini mirip dengan speculative generality Martin Fowler.</p><h2 id="penyebab-smell" tabindex="-1">Penyebab Smell <a class="header-anchor" href="#penyebab-smell" aria-label="Permalink to &quot;Penyebab Smell&quot;">​</a></h2><ul><li><strong>Procedural thinking in object-oriented languages</strong>: developer belum terbiasa dengan paradigma OOP sehingga salah dalam melakukan desain class.</li><li><strong>Over-engineering</strong>: developer membuat desain yang sebenarnya tidak dibutuhkan/overkill, alias sok ide.</li></ul><h2 id="contoh" tabindex="-1">Contoh <a class="header-anchor" href="#contoh" aria-label="Permalink to &quot;Contoh&quot;">​</a></h2><h2 id="masalah" tabindex="-1">Masalah <a class="header-anchor" href="#masalah" aria-label="Permalink to &quot;Masalah&quot;">​</a></h2>',7),h=e("h2",{id:"penyelesaian",tabindex:"-1"},[a("Penyelesaian "),e("a",{class:"header-anchor",href:"#penyelesaian","aria-label":'Permalink to "Penyelesaian"'},"​")],-1),b=e("code",null,"setBackground()",-1);function m(k,p,g,_,y,f){const n=r("github-url");return o(),l("div",null,[c,e("p",null,[a("Di package before, terdapat "),t(n,{to:"before/BlueButton.java"},{default:i(()=>[a("RedButton](before/RedButton.java) dan [BlueButton")]),_:1}),a(" yang sebenarnya hanya menentukan background class javax.swing.JButton. Selain menentukan background, kedua class tersebut tidak memiliki behavior lain.")]),h,e("p",null,[a("Terlalu berlebihan bila sampai kita melakukan inheritance hanya untuk membedakan warna. Warna background sudah cukup diwakilkan oleh atribut di dalam JButton yang bisa diatur menggunakan "),b,a(". Kedua class RedButton dan BlueButton bisa dihapus. Perhatikan "),t(n,{to:"after/ButtonTest.java"},{default:i(()=>[a("ButtonTest")]),_:1}),a(" di package after.")])])}const x=s(u,[["render",m]]);export{P as __pageData,x as default};
