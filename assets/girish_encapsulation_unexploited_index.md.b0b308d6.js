import{_ as t,C as p,o as r,c as i,k as s,a,H as n,w as l,Q as o}from"./chunks/framework.1ff90abd.js";const x=JSON.parse('{"title":"Unexploited Encapsulation","description":"","frontmatter":{},"headers":[],"relativePath":"girish/encapsulation/unexploited/index.md","filePath":"girish/encapsulation/unexploited/index.md"}'),c={name:"girish/encapsulation/unexploited/index.md"},d=s("h1",{id:"unexploited-encapsulation",tabindex:"-1"},[a("Unexploited Encapsulation "),s("a",{class:"header-anchor",href:"#unexploited-encapsulation","aria-label":'Permalink to "Unexploited Encapsulation"'},"â€‹")],-1),u=s("div",{class:"video-wrapper"},[s("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/qQC5cXVuX9Y",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""})],-1),h=o('<blockquote><p>Tampaknya ini smell udah familiar dengan Martin Fowler - Switch Statments... Intinya jangan pakai if-else atau switch untuk seleksi Object aja..! Selesai ðŸ˜€</p></blockquote><p>Smell ini terjadi karena adanya pemakaian <code>switch</code> ataupun <code>if-else</code> statement untuk melakukan validasi tipe object. Smell ini hampir sama dengan smell <a href="./../../../martin-fowler/oo-abusers/switch-statements/">Switch statements</a>.</p><p>Tidak semua <code>switch</code> atau <code>if-else</code> itu berbahaya. Perlu dipertimbangkan apakah akan terjadi violasi terhadap OCP (<a href="https://en.wikipedia.org/wiki/Open%E2%80%93closed_principle" target="_blank" rel="noreferrer">Open Closed Principle</a>).</p><h2 id="contoh" tabindex="-1">Contoh <a class="header-anchor" href="#contoh" aria-label="Permalink to &quot;Contoh&quot;">â€‹</a></h2><h2 id="permasalahan" tabindex="-1">Permasalahan <a class="header-anchor" href="#permasalahan" aria-label="Permalink to &quot;Permasalahan&quot;">â€‹</a></h2>',5),y=o(`<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(shape.</span><span style="color:#B392F0;">equalsIgnoreCase</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;square&quot;</span><span style="color:#E1E4E8;">)){</span></span>
<span class="line"><span style="color:#E1E4E8;">  ...</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(shape.</span><span style="color:#B392F0;">equalsIgnoreCase</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;triangle&quot;</span><span style="color:#E1E4E8;">)){</span></span>
<span class="line"><span style="color:#E1E4E8;">  ...</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(shape.</span><span style="color:#6F42C1;">equalsIgnoreCase</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;square&quot;</span><span style="color:#24292E;">)){</span></span>
<span class="line"><span style="color:#24292E;">  ...</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(shape.</span><span style="color:#6F42C1;">equalsIgnoreCase</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;triangle&quot;</span><span style="color:#24292E;">)){</span></span>
<span class="line"><span style="color:#24292E;">  ...</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Kedua class tersebut akan melanggar OCP. Bayangkan bila ada tipe <code>Shape</code> baru yang perlu dibuat, tentu saja akan bertambah lagi <code>if</code> di masing-masing ShapePrinter dan CharNeededCounter.</p><p>Misal bertambah logic shape <code>Circle</code>. Violasi OCP terjadi di 2 class tersebut.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(shape.</span><span style="color:#B392F0;">equalsIgnoreCase</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;square&quot;</span><span style="color:#E1E4E8;">)){</span></span>
<span class="line"><span style="color:#E1E4E8;">  ...</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(shape.</span><span style="color:#B392F0;">equalsIgnoreCase</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;triangle&quot;</span><span style="color:#E1E4E8;">)){</span></span>
<span class="line"><span style="color:#E1E4E8;">  ...</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(shape.</span><span style="color:#B392F0;">equalsIgnoreCase</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;circle&quot;</span><span style="color:#E1E4E8;">)){</span></span>
<span class="line"><span style="color:#E1E4E8;">  ...</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(shape.</span><span style="color:#6F42C1;">equalsIgnoreCase</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;square&quot;</span><span style="color:#24292E;">)){</span></span>
<span class="line"><span style="color:#24292E;">  ...</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(shape.</span><span style="color:#6F42C1;">equalsIgnoreCase</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;triangle&quot;</span><span style="color:#24292E;">)){</span></span>
<span class="line"><span style="color:#24292E;">  ...</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(shape.</span><span style="color:#6F42C1;">equalsIgnoreCase</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;circle&quot;</span><span style="color:#24292E;">)){</span></span>
<span class="line"><span style="color:#24292E;">  ...</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Di dalam contoh ini, if-else square dan triangle ada di 2 class. Pada kondisi nyata bila hal ini dibiarkan terjadi, if-else square dan triangle akan terus beranak-pinak bila ada kebutuhan logic lain.</p><p>Semakin sedikit kita menggunakan if-else di dalam code, maka akan semakin baik. Bahkan ada orang yang membuat campaign untuk ini: <a href="https://francescocirillo.com/pages/anti-if-campaign" target="_blank" rel="noreferrer">Anti-IF Campaign</a>.</p><h2 id="penyelesaian" tabindex="-1">Penyelesaian <a class="header-anchor" href="#penyelesaian" aria-label="Permalink to &quot;Penyelesaian&quot;">â€‹</a></h2><p>Untuk contoh kasus ini, kita melakukan tahapan berikut:</p><p><strong>Opsi 1: <a href="https://refactoring.guru/replace-type-code-with-subclasses" target="_blank" rel="noreferrer">Replace Type Code with Subclasses</a></strong></p>`,9),E=s("code",null,"square",-1),g=s("code",null,"triangle",-1),k=s("code",null,"charNeeded",-1),m=s("code",null,"print",-1),b=s("code",null,"Shape",-1),_=o('<p><strong>Opsi 2: <a href="https://refactoring.guru/replace-conditional-with-polymorphism" target="_blank" rel="noreferrer">Replace Conditional with Polymorphism</a></strong></p><p>Setelah class <code>Square</code> dan <code>Triangle</code> sudah terbentuk. Logic print dari <code>ShapePrinter</code> dan logic menghitung karakter dari <code>CharNeededCounter</code> dipindahkan ke masing-masing class.</p><p>Dengan begini, bila ada jenis baru, misalkan <code>Circle</code>, kita tinggal extends dari class <code>Shape</code>.</p><h2 id="when-to-ignore" tabindex="-1">When to Ignore <a class="header-anchor" href="#when-to-ignore" aria-label="Permalink to &quot;When to Ignore&quot;">â€‹</a></h2><p>Perlu diketahui jika pada kasus tersebut berkaitan dengan masalah validasi tipe object melalui inputan user ataupun class ini dibuatkan dengan menerapkan design pattern <a href="https://refactoring.guru/design-patterns/abstract-factory" target="_blank" rel="noreferrer">Factory</a>, maka perlu diketahui bahwa smell ini dapat diabaikan namun dengan catatan pada kasus <code>ShapeFactory</code> berikut.</p><h2 id="shapefactory" tabindex="-1">ShapeFactory <a class="header-anchor" href="#shapefactory" aria-label="Permalink to &quot;ShapeFactory&quot;">â€‹</a></h2>',6),f=s("p",null,[a("Harusnya Anda menyadari bahwa terjadi violasi OCP disini. Bila class "),s("code",null,"Circle"),a(" dibuat, maka if di Factory bertambah. Hal ini dimaklumi karena OCP hanya dilanggar satu kali saja di dalam Factory (tidak akan dilanggar lagi di tempat lain) dan memang terpaksa dilakukan karena input dari user adalah string. Ibaratkan Factory disini berperan sebagai anti-corruption layer.")],-1),C=s("p",null,[a("Di beberapa bahasa pemrograman, ada cara spesifik untuk mengakali menghilangkan if-else pada class Factory, contohnya untuk Java: "),s("a",{href:"https://www.javacodegeeks.com/2014/10/factory-without-if-else.html",target:"_blank",rel:"noreferrer"},"https://www.javacodegeeks.com/2014/10/factory-without-if-else.html"),a(".")],-1);function q(F,v,S,w,P,j){const e=p("github-url");return r(),i("div",null,[d,u,h,s("p",null,[a("Lihat class "),n(e,{to:"before/ShapePrinter.java"},{default:l(()=>[a("ShapePrinter.java")]),_:1}),a(" dan "),n(e,{to:"before/CharNeededCounter.java"},{default:l(()=>[a("CharNeededCounter.java.")]),_:1})]),y,s("p",null,[a("Kita memiliki dua type code. "),E,a(" dan "),g,a(". Oleh karena itu, kita buat class "),n(e,{to:"after/Square.java"},{default:l(()=>[a("Square")]),_:1}),a(", "),n(e,{to:"after/Shape.java"},{default:l(()=>[a("Shape")]),_:1}),a(" sebagai abstract class yang memiliki fungsi "),k,a(" dan "),m,a(", lalu "),n(e,{to:"after/Triangle.java"},{default:l(()=>[a("Triangle.java")]),_:1}),a(" dan "),n(e,{to:"after/Square.java"},{default:l(()=>[a("Square.java")]),_:1}),a(" meng-extends class "),b,a(".")]),_,s("p",null,[a("User tetap akan meng-input string melalui console. Oleh karena itu, kita perlu menyiapkan sebuah class "),n(e,{to:"after/ShapeFactory"},{default:l(()=>[a("Factory")]),_:1}),a(" untuk membuat class Shape dari string yang diinput.")]),f,C])}const A=t(c,[["render",q]]);export{x as __pageData,A as default};
