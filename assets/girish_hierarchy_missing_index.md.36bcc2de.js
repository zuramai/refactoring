import{_ as t,C as p,o as i,c,k as s,a,H as e,w as l,Q as o}from"./chunks/framework.6730c137.js";const r="/assets/hierarchy-missing-1.f503f43d.png",I=JSON.parse('{"title":"Missing Hierarchy","description":"","frontmatter":{},"headers":[],"relativePath":"girish/hierarchy/missing/index.md","filePath":"girish/hierarchy/missing/index.md"}'),d={name:"girish/hierarchy/missing/index.md"},y=s("h1",{id:"missing-hierarchy",tabindex:"-1"},[a("Missing Hierarchy "),s("a",{class:"header-anchor",href:"#missing-hierarchy","aria-label":'Permalink to "Missing Hierarchy"'},"​")],-1),E=s("div",{class:"video-wrapper"},[s("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/Z0gVvdARFWw",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""})],-1),h=o('<p>Smell ini terjadi ketika mayoritas class-class turunannya (subclass) mempunyai method/behaviour yang seharusnya bisa ditempatkan pada superclass sebagai method atau <code>abstract</code> method.</p><p>Smell ini seringkali disandingkan dengan smell <a href="./../../../martin-fowler/oo-abusers/switch-statements/">Switch-statements</a> dikarenakan smell ini identik dengan pemakaian <code>if-else</code> atau <code>switch</code> statements yang berulang-ulang (termasuk dengan <code>instanceof</code> untuk class matching pada object dan typecasting).</p><h2 id="penyebab" tabindex="-1">Penyebab <a class="header-anchor" href="#penyebab" aria-label="Permalink to &quot;Penyebab&quot;">​</a></h2><ul><li><strong>Misguided simplistic design &amp; Procedural approach to design</strong>: Developer (minim pengalaman/prosedural) menganggap bahwa pemakaian type value dan conditional statement dapat menyederhanakan desain software.</li><li><strong>Overlooking inheritance as a design technique</strong>: Developer menganggap inheritance berfungsi lebih ke penambahan variasi desain ketimbang untuk keperluan hierarkis.</li></ul><h2 id="penyelesaian" tabindex="-1">Penyelesaian <a class="header-anchor" href="#penyelesaian" aria-label="Permalink to &quot;Penyelesaian&quot;">​</a></h2><p>Untuk menuntaskan smell tersebut, ada dua cara penyelesaian smell tersebut yaitu:</p><ul><li>Jika smell tersebut terjadi karena kesamaan method, lakukan introduce interface atau extract ke abstract class (superclass) untuk class-class terkait.</li><li>Jika smell tersebut terjadi dimana conditional statements dapat dijadikan class, extract method-method dan member sebagai superclass (abstract/interface) dimana setiap class turunannya mengimplementasikan method-method abstract dari superclass. Teknik ini tentunya akan menjalankan polymorphism method secara langsung pada object variatifnya.</li></ul><h2 id="contoh" tabindex="-1">Contoh <a class="header-anchor" href="#contoh" aria-label="Permalink to &quot;Contoh&quot;">​</a></h2><h2 id="contoh-1-java-swing-plaf-windows-xpstyle-margin-problems" tabindex="-1">Contoh 1: <code>java.swing.plaf.windows.XPStyle</code> margin problems <a class="header-anchor" href="#contoh-1-java-swing-plaf-windows-xpstyle-margin-problems" aria-label="Permalink to &quot;Contoh 1: `java.swing.plaf.windows.XPStyle` margin problems&quot;">​</a></h2><p><img src="'+r+`" alt="Hierarchical view of &#39;java.swing.plaf.windows.XPStyle&#39;" title="Hierarchical view of &#39;java.swing.plaf.windows.XPStyle&#39;"></p><p>Salah satu kasus yang disinggung oleh Girish adalah masalah margin dari class <code>java.swing.plaf.windows.XPStyle</code> dimana terdapat bagian code yang melakukan cek margin dari ketiga komponen tersebut yaitu <code>AbstractButton</code>, <code>JToolBar</code>, dan <code>JTextComponent</code> yang seharusnya dapat dijadikan interface tersendiri pada method <code>getBorderInsets(Component c, Insets insets)</code> sebagai berikut:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Insets </span><span style="color:#B392F0;">getBorderInsets</span><span style="color:#E1E4E8;">(Component c, Insets insets){</span></span>
<span class="line"><span style="color:#E1E4E8;">  Insets margin </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Ideally we’d have an interface defined for classes which</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// support margins (to avoid this hackery), but we’ve</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// decided against it for simplicity</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (c </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> AbstractButton) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    margin </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ((AbstractButton)c).</span><span style="color:#B392F0;">getMargin</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (c </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> JToolBar) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    margin </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ((JToolBar)c).</span><span style="color:#B392F0;">getMargin</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (c </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> JTextComponent) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    margin </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ((JTextComponent)c).</span><span style="color:#B392F0;">getMargin</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// rest of the code elided ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Insets </span><span style="color:#6F42C1;">getBorderInsets</span><span style="color:#24292E;">(Component c, Insets insets){</span></span>
<span class="line"><span style="color:#24292E;">  Insets margin </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Ideally we’d have an interface defined for classes which</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// support margins (to avoid this hackery), but we’ve</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// decided against it for simplicity</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (c </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> AbstractButton) {</span></span>
<span class="line"><span style="color:#24292E;">    margin </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ((AbstractButton)c).</span><span style="color:#6F42C1;">getMargin</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (c </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> JToolBar) {</span></span>
<span class="line"><span style="color:#24292E;">    margin </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ((JToolBar)c).</span><span style="color:#6F42C1;">getMargin</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (c </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> JTextComponent) {</span></span>
<span class="line"><span style="color:#24292E;">    margin </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ((JTextComponent)c).</span><span style="color:#6F42C1;">getMargin</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// rest of the code elided ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Salah satu penyelesaian dari smell tersebut adalah dengan membuat interface bernama <code>MarginSupported</code> yang berisikan method setter dan getter Margin yang akan dipakai oleh ketiga component yaitu <code>AbstractButton</code>, <code>JToolBar</code>, dan <code>JTextComponent</code>.</p><p>Meski demikian, developer Java juga mengakui adanya kesalahan yang menyebabkan smell ini terjadi karena masalah tanggungnya developer dan kesederhanaan code.</p><h2 id="contoh-2-player-monster-and-npc-attack-problems" tabindex="-1">Contoh 2: Player, Monster, and NPC attack problems <a class="header-anchor" href="#contoh-2-player-monster-and-npc-attack-problems" aria-label="Permalink to &quot;Contoh 2: Player, Monster, and NPC attack problems&quot;">​</a></h2>`,15),u=s("code",null,"NPC",-1),m=s("code",null,"GameObject.java",-1),g=s("code",null,"NPC",-1),b=o(`<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hit</span><span style="color:#E1E4E8;">(GameObject obj, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> damage) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(obj </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> Monster) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ((Monster) obj).</span><span style="color:#B392F0;">hit</span><span style="color:#E1E4E8;">(damage);</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(obj </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> Player) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ((Player) obj).</span><span style="color:#B392F0;">hit</span><span style="color:#E1E4E8;">(damage);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hit</span><span style="color:#24292E;">(GameObject obj, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> damage) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(obj </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> Monster) {</span></span>
<span class="line"><span style="color:#24292E;">    ((Monster) obj).</span><span style="color:#6F42C1;">hit</span><span style="color:#24292E;">(damage);</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(obj </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> Player) {</span></span>
<span class="line"><span style="color:#24292E;">    ((Player) obj).</span><span style="color:#6F42C1;">hit</span><span style="color:#24292E;">(damage);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,1),k=s("code",null,"hit()",-1),f=s("a",{href:"after/Hittable.java"},"Hittable",-1),_=s("code",null,"hit(int damage)",-1),v=s("code",null,"Monster",-1),j=s("code",null,"Player",-1),A=s("code",null,"after",-1),w=s("code",null,"hit(GameObject obj, int damage)",-1),C=o(`<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hit</span><span style="color:#E1E4E8;">(GameObject obj, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> damage) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(obj </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> Hittable) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ((Hittable) obj).</span><span style="color:#B392F0;">hit</span><span style="color:#E1E4E8;">(damage);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hit</span><span style="color:#24292E;">(GameObject obj, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> damage) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(obj </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> Hittable) {</span></span>
<span class="line"><span style="color:#24292E;">    ((Hittable) obj).</span><span style="color:#6F42C1;">hit</span><span style="color:#24292E;">(damage);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="julukan" tabindex="-1">Julukan <a class="header-anchor" href="#julukan" aria-label="Permalink to &quot;Julukan&quot;">​</a></h2><ul><li><strong>Tag class</strong>: Terjadi karena adanya pemakaian tag field (hardcoded variables) untuk cek variasi class.</li><li><strong>Missing inheritance</strong>: Adanya bagian code yang terindikasi duplikat atau pemakaian “switch-case” statements yang seharusnya digantikan dengan inheritance.</li><li><strong>Collapsed type hierarchy</strong>: Terjadi karena adanya pemakaian 2 atau lebih conditional check yang digunakan untuk menentukan behaviour.</li><li><strong>Embedded features</strong>: Terjadi karena adanya pemakaian toggle attribute untuk menentukan behaviour dari class-class lain.</li></ul><h2 id="when-to-ignore" tabindex="-1">When to Ignore <a class="header-anchor" href="#when-to-ignore" aria-label="Permalink to &quot;When to Ignore&quot;">​</a></h2><p>Smell ini dapat dibiarkan jika class tersebut difungsikan untuk pemakaian design pattern berbasis Factory class atau untuk keperluan input dari file/user prompts dengan encoding teks/inputan sebagai object dalam Java.</p>`,5);function F(D,P,T,S,B,x){const n=p("github-url");return i(),c("div",null,[y,E,h,s("p",null,[a("Pada kasus dalam package "),e(n,{to:"before/GameObject"},{default:l(()=>[a("GameObject.java")]),_:1}),a(", terdapat 3 class entity yang menyangkut masalah attack, dimana salah satu classnya yaitu "),u,a(" adalah entity yang tidak dapat diserang oleh entity lain. Ketika class "),m,a(" dijadikan perwakilan atas entity-entity tersebut, penyerangan seharusnya tidak boleh terjadi pada "),g,a(" karena NPC tidak mempunyai darah.")]),s("p",null,[a("Di sisi lain, dipergunakanlah class "),e(n,{to:"before/AttackService.java"},{default:l(()=>[a("AttackService.java")]),_:1}),a(" untuk menyelesaikan kasus penyerangan NPC, dimana class ini menyangkut adanya conditional checking pada snippet code berikut:")]),b,s("p",null,[a("Snippet code/method "),k,a(" tentunya menimbulkan smell karena adanya pemakaian conditional checking yang berulang-ulang pada method tersebut. Sebagai gantinya, pada package "),e(n,{to:"after/AttackService.java"},{default:l(()=>[a("AttackService")]),_:1}),a(", pemakaian polymorphism dipergunakan untuk menyelesaikan smell tersebut dengan membuat interface "),f,a(" yang mengimplementasikan method "),_,a(" untuk dipergunakan pada class "),v,a(" dan "),j,a(" dimana pada class "),e(n,{to:"after/AttackService.java"},{default:l(()=>[a("AttackService.java")]),_:1}),a(" dalam package "),A,a(", hanya ada pemanggilan method polymorphism dari method "),w,a(" sebagai berikut:")]),C])}const J=t(d,[["render",F]]);export{I as __pageData,J as default};
