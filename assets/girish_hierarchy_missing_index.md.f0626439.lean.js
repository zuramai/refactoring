import{_ as t,C as p,o as i,c,k as s,a,H as e,w as l,Q as o}from"./chunks/framework.1ff90abd.js";const r="/assets/hierarchy-missing-1.f503f43d.png",I=JSON.parse('{"title":"Missing Hierarchy","description":"","frontmatter":{},"headers":[],"relativePath":"girish/hierarchy/missing/index.md","filePath":"girish/hierarchy/missing/index.md"}'),d={name:"girish/hierarchy/missing/index.md"},y=s("h1",{id:"missing-hierarchy",tabindex:"-1"},[a("Missing Hierarchy "),s("a",{class:"header-anchor",href:"#missing-hierarchy","aria-label":'Permalink to "Missing Hierarchy"'},"â€‹")],-1),E=s("div",{class:"video-wrapper"},[s("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/Z0gVvdARFWw",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""})],-1),h=o("",15),u=s("code",null,"NPC",-1),m=s("code",null,"GameObject.java",-1),g=s("code",null,"NPC",-1),b=o("",1),k=s("code",null,"hit()",-1),f=s("a",{href:"after/Hittable.java"},"Hittable",-1),_=s("code",null,"hit(int damage)",-1),v=s("code",null,"Monster",-1),j=s("code",null,"Player",-1),A=s("code",null,"after",-1),w=s("code",null,"hit(GameObject obj, int damage)",-1),C=o("",5);function F(D,P,T,S,B,x){const n=p("github-url");return i(),c("div",null,[y,E,h,s("p",null,[a("Pada kasus dalam package "),e(n,{to:"before/GameObject"},{default:l(()=>[a("GameObject.java")]),_:1}),a(", terdapat 3 class entity yang menyangkut masalah attack, dimana salah satu classnya yaitu "),u,a(" adalah entity yang tidak dapat diserang oleh entity lain. Ketika class "),m,a(" dijadikan perwakilan atas entity-entity tersebut, penyerangan seharusnya tidak boleh terjadi pada "),g,a(" karena NPC tidak mempunyai darah.")]),s("p",null,[a("Di sisi lain, dipergunakanlah class "),e(n,{to:"before/AttackService.java"},{default:l(()=>[a("AttackService.java")]),_:1}),a(" untuk menyelesaikan kasus penyerangan NPC, dimana class ini menyangkut adanya conditional checking pada snippet code berikut:")]),b,s("p",null,[a("Snippet code/method "),k,a(" tentunya menimbulkan smell karena adanya pemakaian conditional checking yang berulang-ulang pada method tersebut. Sebagai gantinya, pada package "),e(n,{to:"after/AttackService.java"},{default:l(()=>[a("AttackService")]),_:1}),a(", pemakaian polymorphism dipergunakan untuk menyelesaikan smell tersebut dengan membuat interface "),f,a(" yang mengimplementasikan method "),_,a(" untuk dipergunakan pada class "),v,a(" dan "),j,a(" dimana pada class "),e(n,{to:"after/AttackService.java"},{default:l(()=>[a("AttackService.java")]),_:1}),a(" dalam package "),A,a(", hanya ada pemanggilan method polymorphism dari method "),w,a(" sebagai berikut:")]),C])}const J=t(d,[["render",F]]);export{I as __pageData,J as default};
