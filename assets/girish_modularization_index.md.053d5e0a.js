import{_ as n,o as t,c as i,Q as e,k as a}from"./chunks/framework.5a42e701.js";const r="/assets/modularization.84ebfae9.png",s="/assets/modularization-principles.911fe32e.png",f=JSON.parse('{"title":"Modularization","description":"","frontmatter":{},"headers":[],"relativePath":"girish/modularization/index.md","filePath":"girish/modularization/index.md"}'),l={name:"girish/modularization/index.md"},d=e('<h1 id="modularization" tabindex="-1">Modularization <a class="header-anchor" href="#modularization" aria-label="Permalink to &quot;Modularization&quot;">​</a></h1><p><img src="'+r+'" alt="Girish modularization smell"></p><p>Semua smell di dalam grup ini berkaitan dengan kesalahan dalam merancang modul-modul di dalam hierarki.</p><ul><li>Modularization Intro | <a href="https://www.youtube.com/watch?v=Q5Y42rdZza4&amp;list=PLG_Cu5FmqSk2KHT6lXngRvcOmOzuk4_ju" target="_blank" rel="noreferrer">Link Video</a></li><li><a href="./broken/">Broken Modularization</a> | <a href="https://www.youtube.com/watch?v=0aeIbhESMco&amp;list=PLG_Cu5FmqSk2KHT6lXngRvcOmOzuk4_ju" target="_blank" rel="noreferrer">Link Video</a></li><li><a href="./insufficient/">Insufficient Modularization</a> | <a href="https://www.youtube.com/watch?v=eRAoks2udlk&amp;list=PLG_Cu5FmqSk2KHT6lXngRvcOmOzuk4_ju" target="_blank" rel="noreferrer">Link Video</a></li><li><a href="./cyclically-dependent/">Cyclically-dependent Modularization</a> | <a href="https://www.youtube.com/watch?v=Xm5T75YZB0I&amp;list=PLG_Cu5FmqSk2KHT6lXngRvcOmOzuk4_ju" target="_blank" rel="noreferrer">Link Video</a></li><li><a href="./hub/">Hub-like Modularization</a> | <a href="https://www.youtube.com/watch?v=ImUM8T-1fy4&amp;list=PLG_Cu5FmqSk2KHT6lXngRvcOmOzuk4_ju" target="_blank" rel="noreferrer">Link Video</a></li></ul><h2 id="filosofi" tabindex="-1">Filosofi <a class="header-anchor" href="#filosofi" aria-label="Permalink to &quot;Filosofi&quot;">​</a></h2><p>Buku adalah konten yang berisikan sekumpulan teks paragraf. Bayangkan apa yang terjadi bila semua teks ditulis mentah-mentah tanpa menggunakan Heading, Chapter, Bab, Indeks maupun sub-bab untuk membatasi isi materi dalam buku? Jawabannya pasti akan mempersulit pembaca lain dalam memahami materi dari buku yang mereka buat tentunya.</p><h2 id="prinsip-modularization" tabindex="-1">Prinsip Modularization <a class="header-anchor" href="#prinsip-modularization" aria-label="Permalink to &quot;Prinsip Modularization&quot;">​</a></h2>',7),o=a("div",{class:"video-wrapper"},[a("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/Q5Y42rdZza4",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""})],-1),u=e('<p><img src="'+s+'" alt="Girish Modularization principles"></p><p>Secara teoretis, Sebuah class/abstraksi seharusnya memiliki <strong>tingkat kohesi yang tinggi dan coupling yang rendah</strong> sehingga class tersebut mempunyai tanggungjawab yang sesuai, function dan member yang saling berinteraksi satu sama lain tanpa bergantung pada class lain.</p><p>Menurut Girish Suryanarayana dkk, terdapat 4 prinsip modularization yaitu:</p><ul><li><strong>Localize related data and methods</strong> - Kumpulkan field, member, dan method yang mempunyai tanggungjawab yang sama ke dalam 1 abstraksi.</li><li><strong>Decompose abstractions to manageable size</strong> - Pecahkan abstraksi yang terlalu besar menjadi beberapa abstraksi (yang imbang ukurannya, tidak terlalu kecil dan tidak terlalu besar) sesuai dengan tanggungjawab masing-masing abstraksi/class sehingga dapat dimengerti oleh developer.</li><li><strong>Create acyclic dependencies</strong> - Abstraksi seharusnya tidak boleh mengandung dependensi yang <em>cyclic</em> dengan class lain baik secara langsung ataupun tidak langsung. Jika digambarkan dalam <em>dependency graph</em>, maka graph tersebut tidak boleh terdapat perputaran dependency antar-class.</li><li><strong>Limit dependencies</strong> - Sebuah abstraksi seharusnya dibuat dengan dependensi seminimal mungkin baik <em>fan-in</em> (usages/pemakaian di abstraksi lain) maupun <em>fan-out</em> (imports/ketergantungan pada abstraksi lain).</li></ul><p>Berdasarkan pada pengamatan abstraction smell, terdapat pelanggaran prinsip encapsulation antara lain: (field dan method)</p><table><thead><tr><th>Modularization smell</th><th>Pelanggaran prinsip modularization</th><th>Penyebab</th><th>Martin Fowler smells</th></tr></thead><tbody><tr><td>Broken Modularization</td><td>Localize related data and methods</td><td>1. Pemisahan data dan method dalam class terpisah<br>2. Method kecolongan bermain dengan class lain</td><td>1. Data Class<br>2. Feature Envy</td></tr><tr><td>Insufficient Modularization</td><td>Decompose abstractions to manageable size</td><td>1. Class terlalu besar, tidak ada modularization<br>2. Class/method terlalu kompleks</td><td>1. Large class, divergent changes<br>2. Long method</td></tr><tr><td>Cyclically-dependent Modularization</td><td>Create acyclic dependencies</td><td>Class saling dependensi satu sama lain dengan pasangannya atau teman <em>selingkarnya</em></td><td>Shotgun Surgery, Feature Envy, Inappropriate Intimacy</td></tr><tr><td>Hub-like Modularization</td><td>Limit dependencies</td><td>Class terlalu banyak ketergantungan dari class lain atau dependensi masukan dari class lain</td><td>Shotgun Surgery (bisa terjadi pada class yang depend dengannya)</td></tr></tbody></table><hr><p>Repository ini hanyalah rangkuman dari buku Suryanarayana et al. dengan sedikit tambahan informasi lain. Diharapkan mahasiswa juga membaca sumber aslinya pada bab 5 halaman 93 - 122.</p>',8),m=[d,o,u];function p(c,g,h,b,k,y){return t(),i("div",null,m)}const z=n(l,[["render",p]]);export{f as __pageData,z as default};
