import{_ as c,C as n,o as r,c as E,H as l,w as o,Q as e,k as s,a}from"./chunks/framework.1ff90abd.js";const C=JSON.parse('{"title":"Refused Bequest","description":"","frontmatter":{},"headers":[],"relativePath":"martin-fowler/oo-abusers/refused-bequest/index.md","filePath":"martin-fowler/oo-abusers/refused-bequest/index.md"}'),y={name:"martin-fowler/oo-abusers/refused-bequest/index.md"},i=e('<h1 id="refused-bequest" tabindex="-1">Refused Bequest <a class="header-anchor" href="#refused-bequest" aria-label="Permalink to &quot;Refused Bequest&quot;">​</a></h1><p><a href="https://sourcemaking.com/refactoring/smells/refused-bequest" target="_blank" rel="noreferrer">sourcemaking</a></p><h2 id="penjelasan-smell" tabindex="-1">Penjelasan Smell <a class="header-anchor" href="#penjelasan-smell" aria-label="Permalink to &quot;Penjelasan Smell&quot;">​</a></h2><p>Refused bequest arti harafiahnya adalah &quot;menolak warisan&quot;. Dalam smell ini, sebuah class turunan tidak memakai seluruh method hasil extendsnya. Hal ini mengarah ke violasi LSP dan/atau ISP.</p><p>Dalam contoh kasus, terdapat class <code>Stack.java</code> yang melakukan extends terhadap java.util.Vector.</p><p>Di dalam class <code>Stack</code>, terdapat fungsi standar sebuah stack LIFO. yaitu: pop, push, dan peek.</p>',6),d=s("div",{class:"language-java vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"java"),s("pre",{class:"shiki github-dark vp-code-dark"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#F97583"}},"public"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#F97583"}},"class"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#B392F0"}},"Stack"),s("span",{style:{color:"#E1E4E8"}},"<"),s("span",{style:{color:"#F97583"}},"E"),s("span",{style:{color:"#E1E4E8"}},"> "),s("span",{style:{color:"#F97583"}},"extends"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#B392F0"}},"Vector"),s("span",{style:{color:"#E1E4E8"}},"<"),s("span",{style:{color:"#F97583"}},"E"),s("span",{style:{color:"#E1E4E8"}},"> {")]),a(`
`),s("span",{class:"line"}),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"	"),s("span",{style:{color:"#F97583"}},"public"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#F97583"}},"void"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#B392F0"}},"push"),s("span",{style:{color:"#E1E4E8"}},"(E "),s("span",{style:{color:"#FFAB70"}},"data"),s("span",{style:{color:"#E1E4E8"}},") {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"		"),s("span",{style:{color:"#79B8FF"}},"this"),s("span",{style:{color:"#E1E4E8"}},"."),s("span",{style:{color:"#B392F0"}},"add"),s("span",{style:{color:"#E1E4E8"}},"(data);")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"	}")]),a(`
`),s("span",{class:"line"}),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"	"),s("span",{style:{color:"#F97583"}},"public"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#F97583"}},"void"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#B392F0"}},"pop"),s("span",{style:{color:"#E1E4E8"}},"() {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"		"),s("span",{style:{color:"#79B8FF"}},"this"),s("span",{style:{color:"#E1E4E8"}},"."),s("span",{style:{color:"#B392F0"}},"removeElementAt"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#79B8FF"}},"this"),s("span",{style:{color:"#E1E4E8"}},"."),s("span",{style:{color:"#B392F0"}},"size"),s("span",{style:{color:"#E1E4E8"}},"()"),s("span",{style:{color:"#F97583"}},"-"),s("span",{style:{color:"#79B8FF"}},"1"),s("span",{style:{color:"#E1E4E8"}},");")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"	}")]),a(`
`),s("span",{class:"line"}),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"	"),s("span",{style:{color:"#F97583"}},"public"),s("span",{style:{color:"#E1E4E8"}}," E "),s("span",{style:{color:"#B392F0"}},"peek"),s("span",{style:{color:"#E1E4E8"}},"() {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"		"),s("span",{style:{color:"#F97583"}},"return"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#79B8FF"}},"this"),s("span",{style:{color:"#E1E4E8"}},"."),s("span",{style:{color:"#B392F0"}},"elementAt"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#79B8FF"}},"this"),s("span",{style:{color:"#E1E4E8"}},"."),s("span",{style:{color:"#B392F0"}},"size"),s("span",{style:{color:"#E1E4E8"}},"()"),s("span",{style:{color:"#F97583"}},"-"),s("span",{style:{color:"#79B8FF"}},"1"),s("span",{style:{color:"#E1E4E8"}},");")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"	}")]),a(`
`),s("span",{class:"line"}),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"	"),s("span",{style:{color:"#6A737D"}},"/*")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A737D"}},"	 * you cannot remove by index, use pop instead")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A737D"}},"	 */")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"	@"),s("span",{style:{color:"#F97583"}},"Override")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"	"),s("span",{style:{color:"#F97583"}},"public"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#F97583"}},"synchronized"),s("span",{style:{color:"#E1E4E8"}}," E "),s("span",{style:{color:"#B392F0"}},"remove"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#F97583"}},"int"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#FFAB70"}},"index"),s("span",{style:{color:"#E1E4E8"}},") {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"		"),s("span",{style:{color:"#F97583"}},"return"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#79B8FF"}},"null"),s("span",{style:{color:"#E1E4E8"}},";")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"	}")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"}")])])]),s("pre",{class:"shiki github-light vp-code-light"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#D73A49"}},"public"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#D73A49"}},"class"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#6F42C1"}},"Stack"),s("span",{style:{color:"#24292E"}},"<"),s("span",{style:{color:"#D73A49"}},"E"),s("span",{style:{color:"#24292E"}},"> "),s("span",{style:{color:"#D73A49"}},"extends"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#6F42C1"}},"Vector"),s("span",{style:{color:"#24292E"}},"<"),s("span",{style:{color:"#D73A49"}},"E"),s("span",{style:{color:"#24292E"}},"> {")]),a(`
`),s("span",{class:"line"}),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"	"),s("span",{style:{color:"#D73A49"}},"public"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#D73A49"}},"void"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#6F42C1"}},"push"),s("span",{style:{color:"#24292E"}},"(E "),s("span",{style:{color:"#E36209"}},"data"),s("span",{style:{color:"#24292E"}},") {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"		"),s("span",{style:{color:"#005CC5"}},"this"),s("span",{style:{color:"#24292E"}},"."),s("span",{style:{color:"#6F42C1"}},"add"),s("span",{style:{color:"#24292E"}},"(data);")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"	}")]),a(`
`),s("span",{class:"line"}),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"	"),s("span",{style:{color:"#D73A49"}},"public"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#D73A49"}},"void"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#6F42C1"}},"pop"),s("span",{style:{color:"#24292E"}},"() {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"		"),s("span",{style:{color:"#005CC5"}},"this"),s("span",{style:{color:"#24292E"}},"."),s("span",{style:{color:"#6F42C1"}},"removeElementAt"),s("span",{style:{color:"#24292E"}},"("),s("span",{style:{color:"#005CC5"}},"this"),s("span",{style:{color:"#24292E"}},"."),s("span",{style:{color:"#6F42C1"}},"size"),s("span",{style:{color:"#24292E"}},"()"),s("span",{style:{color:"#D73A49"}},"-"),s("span",{style:{color:"#005CC5"}},"1"),s("span",{style:{color:"#24292E"}},");")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"	}")]),a(`
`),s("span",{class:"line"}),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"	"),s("span",{style:{color:"#D73A49"}},"public"),s("span",{style:{color:"#24292E"}}," E "),s("span",{style:{color:"#6F42C1"}},"peek"),s("span",{style:{color:"#24292E"}},"() {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"		"),s("span",{style:{color:"#D73A49"}},"return"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#005CC5"}},"this"),s("span",{style:{color:"#24292E"}},"."),s("span",{style:{color:"#6F42C1"}},"elementAt"),s("span",{style:{color:"#24292E"}},"("),s("span",{style:{color:"#005CC5"}},"this"),s("span",{style:{color:"#24292E"}},"."),s("span",{style:{color:"#6F42C1"}},"size"),s("span",{style:{color:"#24292E"}},"()"),s("span",{style:{color:"#D73A49"}},"-"),s("span",{style:{color:"#005CC5"}},"1"),s("span",{style:{color:"#24292E"}},");")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"	}")]),a(`
`),s("span",{class:"line"}),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"	"),s("span",{style:{color:"#6A737D"}},"/*")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A737D"}},"	 * you cannot remove by index, use pop instead")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A737D"}},"	 */")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"	@"),s("span",{style:{color:"#D73A49"}},"Override")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"	"),s("span",{style:{color:"#D73A49"}},"public"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#D73A49"}},"synchronized"),s("span",{style:{color:"#24292E"}}," E "),s("span",{style:{color:"#6F42C1"}},"remove"),s("span",{style:{color:"#24292E"}},"("),s("span",{style:{color:"#D73A49"}},"int"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#E36209"}},"index"),s("span",{style:{color:"#24292E"}},") {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"		"),s("span",{style:{color:"#D73A49"}},"return"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#005CC5"}},"null"),s("span",{style:{color:"#24292E"}},";")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"	}")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"}")])])])],-1),u=e(`<p>Namun, terdapat satu masalah. java.util.Vector memiliki banyak fungsi yang memungkinkan class melakukan manipulasi data di dalam array (misalnya bisa hapus data menggunakan indeks). Tentu saja ini melanggar prinsip LIFO (Last-In First-Out).</p><p>Oleh karena itu, di class <code>Stack</code>, diakali dengan cara melakukan override pada masing-masing fungsi java.util.Vector yang tidak ingin digunakan, dan kita menghilangkan kinerjanya dengan cara menghapus pemanggilan super.</p><p>Sebelumnya seperti ini:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> E </span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> index) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(index);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> E </span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(index);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Return super kita ubah menjadi return null. Sehingga remove by index tidak terjadi.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">* you cannot remove by index, use pop instead</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> E </span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> index) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">* you cannot remove by index, use pop instead</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> E </span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Hal ini menjadi code smell <strong>Refused Bequest</strong>, karena class Stack menolak warisan dari class Vector.</p><h2 id="penyelesaian" tabindex="-1">Penyelesaian <a class="header-anchor" href="#penyelesaian" aria-label="Permalink to &quot;Penyelesaian&quot;">​</a></h2><p>Untuk contoh kasus ini, kita melakukan <a href="https://sourcemaking.com/refactoring/replace-inheritance-with-delegation" target="_blank" rel="noreferrer">Replace Inheritance with Delegation</a>.</p><p>Hubungan <code>is-a</code> tidak cocok untuk Stack dan Vector. Kita ubah hubungannya menjadi hubungan <code>has-a</code>.</p><p>class <code>Stack</code> menyimpan java.util.Vector sebagai field-nya. Pop, push, dan peek dilakukan dengan Vector ini.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Stack</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">E</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Vector&lt;</span><span style="color:#F97583;">E</span><span style="color:#E1E4E8;">&gt; vector </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Vector&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(E </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		vector.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pop</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">		vector.</span><span style="color:#B392F0;">removeElementAt</span><span style="color:#E1E4E8;">(vector.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> E </span><span style="color:#B392F0;">peek</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> vector.</span><span style="color:#B392F0;">elementAt</span><span style="color:#E1E4E8;">(vector.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Stack</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Vector&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; vector </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Vector&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(E </span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">		vector.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(data);</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">		vector.</span><span style="color:#6F42C1;">removeElementAt</span><span style="color:#24292E;">(vector.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> E </span><span style="color:#6F42C1;">peek</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> vector.</span><span style="color:#6F42C1;">elementAt</span><span style="color:#24292E;">(vector.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="java-util-stack" tabindex="-1">java.util.Stack <a class="header-anchor" href="#java-util-stack" aria-label="Permalink to &quot;java.util.Stack&quot;">​</a></h2><p>Java sudah memiliki class Stack-nya sendiri di package <code>java.util</code>. Class Stack disini dibuat sendiri hanya untuk keperluan studi kasus. FYI, java.util.Stack adalah hasil inherit dari java.util.Vector. Anda dapat menghapus data di tengah-tengah Stack layaknya menggunakan Vector.</p>`,14);function F(h,k,m,v,g,b){const p=n("Tab"),t=n("Tabs");return r(),E("div",null,[i,l(t,null,{default:o(()=>[l(p,{name:"Stack",text:"Stack.java"},{default:o(()=>[d]),_:1})]),_:1}),u])}const D=c(y,[["render",F]]);export{C as __pageData,D as default};
